// Generated by CoffeeScript 1.3.3
(function() {

  (function($, window, document, undefined_) {
    return $.widget("opus.jqplaceholder", {
      options: {
        focus_speed: 600,
        blur_speed: 600,
        padding_top: 0,
        padding_left: 1,
        padding_right: 0,
        padding_bottom: 0,
        vanishing_length: 5,
        slide: true,
        holder_class: 'placeholder',
        holdee_class: 'placeheld',
        label_click: null,
        debug: false,
        auto_resize: true
      },
      _create: function() {
        var placeholder_text,
          _this = this;
        this.$field = this.element;
        placeholder_text = this.$field.data("placeholder");
        if (placeholder_text) {
          this.$label = this._create_label(placeholder_text);
        } else {
          this.$label = this.$field.prev("label");
        }
        if (!this.$label) {
          throw 'Please provide placeholder text by either difining a label for the field, or by adding a data-placeholder attribute';
        }
        this.$field.parent().css({
          position: "relative"
        });
        this._attach_label();
        if (this.options.auto_resize) {
          return $(window).bind('resize.jqplaceholder', function() {
            return _this._refresh();
          });
        }
      },
      _create_label: function(placeholder_text) {
        var $label, name_or_id;
        name_or_id = this.$field.attr('id') || this.$field.attr('name');
        if (!name_or_id) {
          this.$field.attr('name', 'placeheld');
          name_or_id = 'placeheld';
        }
        $label = $(("<label class='" + this.options.holder_class + "' for='" + name_or_id + "'>") + placeholder_text + '</label>');
        this.$field.after($label);
        return $label;
      },
      _attach_label: function() {
        return this.$label.css({
          position: "absolute"
        });
      },
      _position_label: function() {
        return this.$label.css(this._compute_label_offset());
      },
      _compute_label_offset: function() {
        var field_pos, field_surround, label_right, label_rightmost_left, label_top;
        field_pos = this.$field.position();
        field_surround = this._field_padding(this.$field);
        label_top = field_pos.top + field_surround.top + this.options.padding_top;
        this.label_left = field_pos.left + field_surround.left + this.options.padding_left;
        label_right = field_pos.left + this.$field.outerWidth(true) - field_surround.right - this.options.padding_right;
        this.label_rightmost_left = label_right - this.$label.outerWidth(true);
        if (label_rightmost_left < this.label_left) {
          label_rightmost_left = this.label_left;
          this.options.slide = false;
        }
        return {
          top: label_top,
          left: this.label_left
        };
      },
      _init: function() {
        var current_length;
        this._position_label();
        if (!this.options.slide) {
          this.options.vanishing_length = 0;
        }
        current_length = 0;
        this.enable();
        if (this._length_of_current_value(this.$field)) {
          this._apply_placeholder();
        }
        this._animate(this._length_of_current_value(this.$field));
        this._focus_if_active();
        return this;
      },
      refresh: function() {
        return this._init();
      },
      enable: function() {
        var _this = this;
        this.disable();
        this.$label.bind('mousedown.jplaceholder', function(event) {
          return _this._on_mousedown(event);
        });
        return this.$field.addClass(this.options.holdee_class).focus(function() {
          return _this._apply_placeholder();
        }).blur(function() {
          return _this._reset_placeholder();
        }).on("keyup.jqplaceholder keypress.jqplaceholder", null, this, function(event) {
          return _this._on_keystroke(event);
        });
      },
      disable: function() {
        return this.element.unbind('.jqplaceholder');
      },
      destroy: function() {
        this.disable();
        return $.Widget.prototype.destroy.call(this);
      },
      _setOption: function(key, value) {
        $.Widget.prototype._setOption.apply(this, arguments);
        if ($.isPlainObject(key)) {
          this.options = $.extend(true, this.options, key);
        } else if (key && typeof value === "undefined") {
          return this.options[key];
        } else {
          this.options[key] = value;
        }
        return this;
      },
      _focus_if_active: function() {
        var active_ele;
        active_ele = document.activeElement;
        if (active_ele === this.element.get(0)) {
          return this.$field.focus();
        }
      },
      _on_mousedown: function(event) {
        event.preventDefault();
        event.target = this.$field[0];
        if (this.options.label_click) {
          this.options.label_click.apply(this, [event]);
        }
        return this.$field.focus();
      },
      _apply_placeholder: function() {
        if (this.options.slide) {
          return this.$label.stop().animate({
            left: this.label_rightmost_left
          }, this.options.focus_speed);
        }
      },
      _reset_placeholder: function() {
        if (!this._length_of_current_value(this.$field) && this.options.slide) {
          return this.$label.stop().animate({
            left: this.label_left
          }, this.options.blur_speed);
        }
      },
      _pixels_to_int: function(pixels) {
        return parseInt(pixels.replace("px", ""));
      },
      _field_padding: function($fld) {
        var result,
          _this = this;
        result = {};
        $.each(["top", "left", "right", "bottom"], function(index, area) {
          result[area] = 0;
          return $.each(["margin", "border", "padding"], function(index, kind) {
            var selector;
            selector = "" + kind + "-" + area;
            if (kind === "border") {
              selector += "-width";
            }
            return result[area] += _this._pixels_to_int($fld.css(selector));
          });
        });
        return result;
      },
      _length_of_current_value: function($field) {
        var tagname, val;
        tagname = $field.get(0).tagName.toLowerCase();
        val = tagname === "input" || tagname === "textarea" ? $field.val() : $field.text();
        return val.length;
      },
      _on_keystroke: function(event) {
        var current_length;
        current_length = this._length_of_current_value(this.$field);
        if (event && event.type === "keypress") {
          current_length += 1;
        }
        return this._animate(current_length);
      },
      _animate: function(current_length) {
        if (current_length > this.options.vanishing_length) {
          if (this.options.slide) {
            return this.$label.fadeOut();
          } else {
            return this.$label.hide();
          }
        } else {
          return this.$label.show();
        }
      }
    });
  })(jQuery, window, document);

}).call(this);
